spring.application.name=UserServiceF
server.port=${USER_SERVICE_PORT}
#testadmin@gmail.com testadmin
#testy@gmail.com testPassword

#clients:
# postman postpass
# payment-service paymentpass

# = DATA SOURCE
# ===============================
spring.datasource.url=${USER_DB_URI}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ===============================
# = JPA / HIBERNATE
# ===============================
# Automatically update schema (you can use validate / create / create-drop instead)
spring.jpa.hibernate.ddl-auto=update

# Show SQL in console
spring.jpa.show-sql=true

# Dialect for MySQL (Spring Boot usually detects this automatically, but good to set explicitly)
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect


# security configuration
logging.level.org.springframework.security=trace

spring.security.user.name=user
spring.security.user.password=password

#flyway
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true

#kafka
#running on default port in localhost.
spring.kafka.bootstrap-servers=kafka:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
logging.level.org.springframework.kafka=DEBUG
logging.level.org.apache.kafka.clients.producer=DEBUG

#for eureka service
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=${EUREKA_URI}